###########################################
# Adaptive Meshing for Creality Ender-3 V3
###########################################

[respond]

[virtual_pins]

[output_pin ADAPTIVE_BED_MESH]
pin: virtual_pin:ADAPTIVE_BED_MESH_pin
value: 1

[output_pin FULL_BED_MESH]
pin: virtual_pin:FULL_BED_MESH_pin
value: 0


[gcode_macro ADAPTIVE_BED_MESH_ON]
description: Enable Adaptive Bed Mesh and Disable Full Bed Mesh
gcode:
  SET_PIN PIN=ADAPTIVE_BED_MESH VALUE=1
  SET_PIN PIN=FULL_BED_MESH VALUE=0


[gcode_macro ADAPTIVE_BED_MESH_OFF]
description: Disable Adaptive Bed Mesh and Enable Full Bed Mesh
gcode:
  SET_PIN PIN=ADAPTIVE_BED_MESH VALUE=0
  SET_PIN PIN=FULL_BED_MESH VALUE=1


[gcode_macro START_PRINT]
variable_prepare: 0
variable_z_sensorless: 0
gcode:
  SET_GCODE_VARIABLE MACRO=M106 VARIABLE=user_flag VALUE=0
  WAIT_TEMP_END
  CLEAR_PAUSE
  SET_TEMPERATURE_FAN_TARGET temperature_fan=soc_fan target=5
  {% set g28_extruder_temp = printer.custom_macro.g28_ext_temp %}
  {% set bed_temp = printer.custom_macro.default_bed_temp %}
  {% set extruder_temp = printer.custom_macro.default_extruder_temp %}
  {% if 'BED_TEMP' in params|upper and (params.BED_TEMP|float) %}
    {% set bed_temp = params.BED_TEMP %}
  {% endif %}
  {% if 'EXTRUDER_TEMP' in params|upper and (params.EXTRUDER_TEMP|float) %}
    {% set extruder_temp = params.EXTRUDER_TEMP %}
  {% endif %}
  {% if printer['gcode_macro START_PRINT'].prepare|int == 0 %}
    {action_respond_info("not prepare.\n")}
    PRINT_PREPARE_CLEAR
    CX_ROUGH_G28 EXTRUDER_TEMP={extruder_temp} BED_TEMP={bed_temp}
    CX_NOZZLE_CLEAR
    Z_SENSORLESS_SET
    ACCURATE_G28
    {% if printer['output_pin ADAPTIVE_BED_MESH'].value == 1 %}
      RESPOND TYPE=command MSG="Starting Adaptative Bed Mesh..."
      BED_MESH_CLEAR
      BED_MESH_CALIBRATE
      BED_MESH_PROFILE SAVE=adaptative
      BED_MESH_PROFILE LOAD=adaptative
    {% else %}
      {% if printer['output_pin FULL_BED_MESH'].value == 1 %}
        RESPOND TYPE=command MSG="Starting Full Bed Mesh..."
        CX_PRINT_LEVELING_CALIBRATION
      {% endif %}
      BED_MESH_PROFILE LOAD=default
    {% endif %}
  {% else %}
    PRINT_PREPARE_CLEAR
  {% endif %}
  RESPOND TYPE=command MSG="Starting line purge..."
  {% if printer['output_pin ADAPTIVE_BED_MESH'].value == 1 %}
    # NEW: KAMP Smart Park and Adaptive Purge
    _SMART_PARK
    M109 S{extruder_temp}
    M190 S{bed_temp}
    _LINE_PURGE
  {% else %}
    # OLD: Creality Purge
    CX_PRINT_DRAW_ONE_LINE
  {% endif %}
  SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}


[gcode_macro _ADAPTIVE_MESH_SETTINGS]
description: This macro contains all adjustable settings for adaptive bed meshing
variable_verbose_enable: True  # Set to True to enable mesh information output when running. This is useful for debugging.
variable_mesh_margin: 0        # Expands the mesh size in millimeters if desired. Leave at 0 to disable.
variable_fuzz_amount: 0        # Slightly randomizes mesh points to spread out wear from nozzle-based probes. Leave at 0 to disable.

# The following variables are for adjusting Adaptive Line Purging settings for KAMP:
variable_purge_height: 0.8                  # Z position of nozzle during purge. Default is 0.8.
variable_tip_distance: 0                    # Distance between tip of filament and nozzle before purge. Should be similar to PRINT_END final retract amount. Default is 0.
variable_purge_margin: 10                   # Distance the purge will be in front of the print area. Default is 10.
variable_purge_amount: 35                   # Amount of filament to be purged prior to printing. Default is 50.
variable_flow_rate: 12                      # Flow rate of purge in mm3/s. Default is 12.

# The following variables are for adjusting the Smart Park feature for KAMP, which will park the printhead near the print area at a specified height:
variable_smart_park_height: 10              # Z position for Smart Park. Default is 10.

gcode:
    RESPOND TYPE=command MSG="Running the _ADAPTIVE_MESH_SETTINGS macro does nothing, it's only used for storing mesh settings."


[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
    {% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
    {% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
    {% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
    {% set mesh_settings = printer["gcode_macro _ADAPTIVE_MESH_SETTINGS"] %}
    {% set verbose_enable = mesh_settings.verbose_enable | abs %}
    {% set mesh_margin = mesh_settings.mesh_margin | float %}
    {% set fuzz_amount = mesh_settings.fuzz_amount | float %}
    {% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
    {% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
    {% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
    {% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
    {% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
    {% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
    {% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
    {% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
    {% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}
    {% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}
    {% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}
    {% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}
    {% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
    {% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
    {% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
    {% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
    {% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
    {% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
    {% if (points_x > points_y) %}
        {% set points_y = points_x %}
    {% endif %}
    {% if (points_x < points_y) %}
        {% set points_x = points_y %}
    {% endif %}
    {% if (([points_x, points_y]|max) > 6) %}
        {% set algorithm = "bicubic" %}
        {% set min_points = 4 %}
    {% else %}
        {% set algorithm = "lagrange" %}
        {% set min_points = 3 %}
    {% endif %} 
    {% set points_x = [points_x , min_points]|max %}
    {% set points_y = [points_y , min_points]|max %}
    {% set points_x = [points_x , probe_count[0]]|min %}
    {% set points_y = [points_y , probe_count[1]]|min %}
    {% if verbose_enable == True %}
        {% if printer.exclude_object.objects != [] %}
            RESPOND TYPE=command MSG="Algorithm: {algorithm}"
            RESPOND TYPE=command MSG="Default probe count: {probe_count[0]},{probe_count[1]}"
            RESPOND TYPE=command MSG="Adapted probe count: {points_x},{points_y}"
            RESPOND TYPE=command MSG="Default mesh bounds: {bed_mesh_min[0]},{bed_mesh_min[1]}, {bed_mesh_max[0]},{bed_mesh_max[1]}"
            {% if mesh_margin > 0 %}
                RESPOND TYPE=command MSG="Mesh margin is {mesh_margin}, mesh bounds extended by {mesh_margin}mm."
            {% else %}
                RESPOND TYPE=command MSG="Mesh margin is 0, margin not increased."
            {% endif %}
            {% if fuzz_amount > 0 %}
                RESPOND TYPE=command MSG="Mesh point fuzzing enabled, points fuzzed up to {fuzz_amount}mm"
            {% else %}
                RESPOND TYPE=command MSG="Fuzz amount is 0, mesh points not fuzzed."
            {% endif %}
            RESPOND TYPE=command MSG="Adapted mesh bounds: {adapted_x_min},{adapted_y_min}, {adapted_x_max},{adapted_y_max}"
            RESPOND TYPE=command MSG="Mesh adjustments successful!"
        {% else %}
            RESPOND TYPE=command MSG="No object detected! Make sure you have enabled Exclude Objets setting in your slicer. Using Full Bed Mesh."
            G4 P5000
        {% endif %}
    {% endif %}
    _BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
